names(match.df.6gram.index) <- c("source", "sourcengram",
paste0("indexFromText", 1:i))
return(match.df.6gram.index)
}
getCorrelationIndices(test, ngrams)
?cbind.data.frame
match.df.6gram.index <- cbind.data.frame(match.df.6gram.index, index.match, stringsAsFactors = F)
getCorrelationIndices <- function(sourcengram, targetngramsdf) {
match.df.6gram.index <- data.frame(source = sourcengram,
stringsAsFactors = F)
for (i in 1:nrow(targetngramsdf)) {
index.match <- matcher(sourcengram %$% ngram,
targetngramsdf %>%
filter(id == i) %>%
select(ngram)
)
match.df.6gram.index <- cbind.data.frame(match.df.6gram.index, index.match, stringsAsFactors = F)
print(i)
}
names(match.df.6gram.index) <- c("source", "sourcengram",
paste0("indexFromText", 1:i))
return(match.df.6gram.index)
}
getCorrelationIndices(test, ngrams)
which(ngram == targetngram)[[1]]
matcher <- function(sourcengram, targetngram) {
a <- lapply(sourcengram, FUN = function(ngram) {
which(ngram == targetngram)[[1]]
}) %>% unlist
print(length(a))
return(a)
}
getCorrelationIndices <- function(sourcengram, targetngramsdf) {
match.df.6gram.index <- data.frame(source = sourcengram,
stringsAsFactors = F)
for (i in 1:nrow(targetngramsdf)) {
index.match <- matcher(sourcengram %$% ngram,
targetngramsdf %>%
filter(id == i) %>%
select(ngram)
)
match.df.6gram.index <- cbind.data.frame(match.df.6gram.index, index.match, stringsAsFactors = F)
print(i)
}
names(match.df.6gram.index) <- c("source", "sourcengram",
paste0("indexFromText", 1:i))
return(match.df.6gram.index)
}
getCorrelationIndices(test, ngrams)
matcher <- function(sourcengram, targetngram) {
a <- lapply(sourcengram, FUN = function(ngram) {
which(ngram == targetngram)[1]
}) %>% unlist
print(length(a))
return(a)
}
targetngram <- targetngramsdf %>% filter(id == 1) %>% select(ngram)
a <- lapply(sourcengram, FUN = function(ngram) {
which(ngram == targetngram)[1]
}) %>% unlist
sourcengram = sourcengram$ngram
a <- lapply(sourcengram, FUN = function(ngram) {
which(ngram == targetngram)[1]
}) %>% unlist
getCorrelationIndices(test, ngrams)
getCorrelationIndices <- function(sourcengram, targetngramsdf) {
match.df.6gram.index <- data.frame(source = sourcengram,
stringsAsFactors = F)
for (i in 1:nrow(targetngramsdf)) {
index.match <- matcher(sourcengram %$% ngram,
targetngramsdf %>%
filter(id == i) %>%
select(ngram)
)
match.df.6gram.index <- cbind.data.frame(match.df.6gram.index, index.match, stringsAsFactors = F)
print(i)
}
# names(match.df.6gram.index) <- c("source", "sourcengram",
# paste0("indexFromText", 1:i))
return(match.df.6gram.index)
}
getCorrelationIndices(test, ngrams)
View(match.df.6gram.index)
match.df.6gram.index <- data.frame(source = sourcengram,
stringsAsFactors = F)
for (i in 1:nrow(targetngramsdf)) {
index.match <- matcher(sourcengram %$% ngram,
targetngramsdf %>%
filter(id == i) %>%
select(ngram)
)
match.df.6gram.index <- cbind.data.frame(match.df.6gram.index, index.match, stringsAsFactors = F)
print(i)
}
test <- testtext %>% cleanSourceText() %>% ngrammifySourceText()
sourcengram = test
match.df.6gram.index <- data.frame(source = sourcengram,
stringsAsFactors = F)
for (i in 1:nrow(targetngramsdf)) {
index.match <- matcher(sourcengram %$% ngram,
targetngramsdf %>%
filter(id == i) %>%
select(ngram)
)
match.df.6gram.index <- cbind.data.frame(match.df.6gram.index, index.match, stringsAsFactors = F)
print(i)
}
View(match.df.6gram.index)
str(match.df.6gram.index)
str(match.df.6gram.index$inte
match.df.6gram.index$index.match
getCorrelationIndices <- function(sourcengram, targetngramsdf) {
match.df.6gram.index <- data.frame(source = sourcengram,
stringsAsFactors = F)
for (i in 1:nrow(targetngramsdf)) {
index.match <- matcher(sourcengram %$% ngram,
targetngramsdf %>%
filter(id == i) %>%
select(ngram)
)
match.df.6gram.index <- cbind.data.frame(match.df.6gram.index, index.match, stringsAsFactors = F)
print(i)
}
names(match.df.6gram.index) <- c("source", "sourcengram",
paste0("indexFromText", 1:i))
return(match.df.6gram.index)
}
b <- getCorrelationIndices(test, targetngramsdf)
getCorrelationIndices <- function(sourcengram, targetngramsdf) {
match.df.6gram.index <- data.frame(source = sourcengram,
stringsAsFactors = F)
for (i in 1:nrow(targetngramsdf)) {
index.match <- matcher(sourcengram %$% ngram,
targetngramsdf %>%
filter(id == i) %>%
select(ngram)
)
match.df.6gram.index <- cbind.data.frame(match.df.6gram.index, index.match, stringsAsFactors = F)
print(i)
}
colnames(match.df.6gram.index) <- c("source", "sourcengram",
paste0("indexFromText", 1:i))
return(match.df.6gram.index)
}
getCorrelationIndices <- function(sourcengram, targetngramsdf) {
match.df.6gram.index <- data.frame(source = sourcengram,
stringsAsFactors = F)
for (i in 1:nrow(targetngramsdf)) {
index.match <- matcher(sourcengram %$% ngram,
targetngramsdf %>%
filter(id == i) %>%
select(ngram)
)
match.df.6gram.index <- cbind.data.frame(match.df.6gram.index, index.match, stringsAsFactors = F)
print(i)
}
colnames(match.df.6gram.index) <- c("source", "sourcengram", paste0("indexFromText", 1:i))
return(match.df.6gram.index)
}
b <- getCorrelationIndices(test, targetngramsdf)
getCorrelationIndices <- function(sourcengram, targetngramsdf) {
match.df.6gram.index <- data.frame(source = sourcengram,
stringsAsFactors = F)
for (i in 1:nrow(targetngramsdf)) {
index.match <- matcher(sourcengram %$% ngram,
targetngramsdf %>%
filter(id == i) %>%
select(ngram)
)
match.df.6gram.index[,i+2] <- index.match
print(i)
}
colnames(match.df.6gram.index) <- c("source", "sourcengram", paste0("indexFromText", 1:i))
return(match.df.6gram.index)
}
b <- getCorrelationIndices(test, targetngramsdf)
getCorrelationIndices <- function(sourcengram, targetngramsdf) {
match.df.6gram.index <- data.frame(source = sourcengram,
stringsAsFactors = F)
for (i in 1:nrow(targetngramsdf)) {
index.match <- matcher(sourcengram %$% ngram,
targetngramsdf %>%
filter(id == i) %>%
select(ngram) %>%
as.vector()
)
match.df.6gram.index[,i+2] <- index.match
print(i)
}
colnames(match.df.6gram.index) <- c("source", "sourcengram", paste0("indexFromText", 1:i))
return(match.df.6gram.index)
}
b <- getCorrelationIndices(test, targetngramsdf)
i = 1
targetngramsdf %>%
filter(id == i) %>%
select(ngram) %>%
as.vector()
sourcengram %$% ngram
targetngramsdf %>%
filter(id == i) %>%
select(ngram) %>%
unlist
targetngramsdf %>%
filter(id == i) %>%
select(ngram) %>%
as.character()
targetngramsdf$ngram %>%
filter(id == i)
getCorrelationIndices <- function(sourcengram, targetngramsdf) {
match.df.6gram.index <- data.frame(source = sourcengram,
stringsAsFactors = F)
for (i in 1:nrow(targetngramsdf)) {
index.match <- matcher(sourcengram %$% ngram,
targetngramsdf[targetngramsdf[,"id"] == i,"ngram"]
)
match.df.6gram.index[,i+2] <- index.match
print(i)
}
colnames(match.df.6gram.index) <- c("source", "sourcengram", paste0("indexFromText", 1:i))
return(match.df.6gram.index)
}
getCorrelationIndices <- function(sourcengram, targetngramsdf) {
match.df.6gram.index <- data.frame(source = sourcengram,
stringsAsFactors = F)
for (i in 1:nrow(targetngramsdf)) {
index.match <- matcher(sourcengram %$% ngram,
targetngramsdf[targetngramsdf[,"id"] == i,"ngram"]
)
match.df.6gram.index[,i+2] <- index.match
print(i)
}
colnames(match.df.6gram.index) <- c("source", "sourcengram", paste0("indexFromText", 1:i))
return(match.df.6gram.index)
}
b <- getCorrelationIndices(test, targetngramsdf)
sourcengram %$% ngram
targetngramsdf[targetngramsdf[,"id"] == i,"ngram"]
targetngramsdf %>%
as.data.frame() %>%
{.[.[,"id"] == i,"ngram"] }
getCorrelationIndices <- function(sourcengram, targetngramsdf) {
match.df.6gram.index <- data.frame(source = sourcengram,
stringsAsFactors = F)
for (i in 1:nrow(targetngramsdf)) {
index.match <- matcher(sourcengram %$% ngram,
targetngramsdf %>%
as.data.frame() %>%
{.[.[,"id"] == i,"ngram"] }
)
match.df.6gram.index[,i+2] <- index.match
print(i)
}
colnames(match.df.6gram.index) <- c("source", "sourcengram", paste0("indexFromText", 1:i))
return(match.df.6gram.index)
}
b <- getCorrelationIndices(test, targetngramsdf)
getCorrelationIndices <- function(sourcengram, targetngramsdf) {
match.df.6gram.index <- data.frame(source = sourcengram,
stringsAsFactors = F)
for (i in 1:length(unique(targetngramsdf$id))) {
index.match <- matcher(sourcengram %$% ngram,
targetngramsdf %>%
as.data.frame() %>%
{.[.[,"id"] == i,"ngram"] }
)
match.df.6gram.index[,i+2] <- index.match
print(i)
}
colnames(match.df.6gram.index) <- c("source", "sourcengram", paste0("indexFromText", 1:i))
return(match.df.6gram.index)
}
b <- getCorrelationIndices(test, targetngramsdf)
View(b)
setwd("..")
setwd("textlab")
setwd("app")
load("../data/environment-10-17.2017.RData")
runApp('~/Documents/textlab')
targetId = 1
range = c(3,10)
targetngramsdf %>%
filter(id == targetId) %$%
ngram %>%
lapply(FUN = function(ngram) {
ngram[1]
}) %>%
unlist() %>%
.[range[1], range[2]] %>%
return()
targetngramsdf %>%
filter(id == targetId) %$%
ngram %>%
lapply(FUN = function(ngram) {
ngram[1]
}) %>%
unlist()
targetngramsdf %>%
filter(id == targetId) %$%
ngram %>%
lapply(FUN = function(ngram) {
ngram[1]
}) %>%
unlist() %>%
.[range[1]:range[2]] %>%
return()
targetngramsdf %>%
filter(id == targetId) %$%
ngram %>%
lapply(FUN = function(ngram) {
ngram[1]
})
targetngramsdf %>%
filter(id == targetId) %$%
ngram %>%
lapply(FUN = function(ngram) {
ngram %>% strsplit(' ') %>% unlist()[1]
}) %>%
unlist() %>%
.[range[1]:range[2]] %>%
return()
targetngramsdf %>%
filter(id == targetId) %$%
ngram %>%
lapply(FUN = function(ngram) {
strsplit(ngram,' ') %>% unlist()[1]
}) %>%
unlist() %>%
.[range[1]:range[2]] %>%
return()
targetngramsdf %>%
filter(id == targetId) %$%
ngram %>%
lapply(FUN = function(ngram) {
strsplit(ngram,' ') %>% unlist() %>% .[1]
}) %>%
unlist() %>%
.[range[1]:range[2]] %>%
return()
targetngramsdf %>%
filter(id == targetId) %$%
ngram
TARGETNGRAMSDF = ngrams
runApp('~/Documents/textlab')
runApp('~/Documents/textlab')
runApp('~/Documents/textlab')
load("../data/environment-10-17.2017.RData")
TARGETNGRAMSDF = ngrams
MIN_VALUE_TARGET_ID <- min(TARGETNGRAMSDF$id)
MAX_VALUE_TARGET_ID <- max(TARGETNGRAMSDF$id)
runApp('~/Documents/textlab')
runApp('~/Documents/textlab')
runApp('~/Documents/textlab')
runApp('~/Documents/textlab')
runApp('~/Documents/textlab')
runApp('~/Documents/textlab')
"it's turkey time. [toothbrush buzzing] [turkey squawks] - this is it the final lap. - bichon frise dismissed. - we're the top two just us and that stupid freaking schnauzer. - come on wire fox terrier. come on baby. - shh shh shh shh. the judge has made his decision. - shut up! hold my hand captain. hold my hand. - and best in show goes to the wire fox terrier. [yelling and exclaiming] - i'm gonna live forever! - whoo! [tense music] - charles? it's been quiet for a while. everything okay? - i was gonna chop the heck out of this bastard but then he looked me in the eye - he scratched you up real bad didn't he? - yep he got me good. [all exclaiming] it's okay. once i started giving him gouda he showed me mercy. - so we're not eating the turkey then? - obviously not. - hello everyone. guess who just solved a 20-year-old unsolvable case?" %>%
cleanSourceText() %>%
ngrammifySourceText() %>%
getCorrelationIndices(., TARGETNGRAMSDF) %>%
as.matrix()[,-c(1,2)] %>%
melt %>%
ggplot(aes(Var1, Var2, fill=value)) +
geom_raster() +
scale_fill_gradientn(colours = terrain.colors(10)) +
theme_minimal() +
theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank())
# helper function to clean the source text similar to how the targets were cleaned
cleanSourceText <- function(text) {
text %>%
gsub("\\[.*?\\]", "", .) %>%
gsub("[a-zA-Z0-9]*:", "", ., perl=T) %>%
tolower %>%
removePunctuation %>%
removeNumbers %>%
return()
}
# helper function to partition the cleaned text (cleanText) to ngrams
ngrammifySourceText <- function(cleanText) {
cleanText %>%
data.frame(id = "source", text = ., stringsAsFactors = F) %>%
unnest_tokens("ngram", "text", token = "ngrams", n = 6) %>%
return()
}
# helper function to get the index of the matched ngram in the target
matcher <- function(sourcengram, targetngram) {
a <- lapply(sourcengram, FUN = function(ngram) {
which(ngram == targetngram)[1]
}) %>% unlist
print(length(a))
return(a)
}
# helper function to get the correlationPlot
getCorrelationIndices <- function(sourcengram, targetngramsdf) {
match.df.6gram.index <- data.frame(source = sourcengram,
stringsAsFactors = F)
for (i in 1:length(unique(targetngramsdf$id))) {
index.match <- matcher(sourcengram %$% ngram,
targetngramsdf %>%
as.data.frame() %>%
{.[.[,"id"] == i,"ngram"] }
)
match.df.6gram.index[,i+2] <- index.match
print(i)
}
colnames(match.df.6gram.index) <- c("source", "sourcengram", paste0("indexFromText", 1:i))
return(match.df.6gram.index)
}
# helper function to show the extracted range from the target
showTargetText <- function(targetngramsdf, targetId) {
#params: targetngramsdf - data.frame, dataframe of all ngrams with cols id and ngrams
#       targetId - int, id of the target
targetngramsdf %>%
filter(id == targetId) %$%
ngram %>%
lapply(FUN = function(ngram) {
strsplit(ngram,' ') %>% unlist() %>% .[1]
}) %>%
unlist() %>%
return()
}
"it's turkey time. [toothbrush buzzing] [turkey squawks] - this is it the final lap. - bichon frise dismissed. - we're the top two just us and that stupid freaking schnauzer. - come on wire fox terrier. come on baby. - shh shh shh shh. the judge has made his decision. - shut up! hold my hand captain. hold my hand. - and best in show goes to the wire fox terrier. [yelling and exclaiming] - i'm gonna live forever! - whoo! [tense music] - charles? it's been quiet for a while. everything okay? - i was gonna chop the heck out of this bastard but then he looked me in the eye - he scratched you up real bad didn't he? - yep he got me good. [all exclaiming] it's okay. once i started giving him gouda he showed me mercy. - so we're not eating the turkey then? - obviously not. - hello everyone. guess who just solved a 20-year-old unsolvable case?" %>%
cleanSourceText() %>%
ngrammifySourceText() %>%
getCorrelationIndices(., TARGETNGRAMSDF) %>%
as.matrix()[,-c(1,2)] %>%
melt %>%
ggplot(aes(Var1, Var2, fill=value)) +
geom_raster() +
scale_fill_gradientn(colours = terrain.colors(10)) +
theme_minimal() +
theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank())
"it's turkey time. [toothbrush buzzing] [turkey squawks] - this is it the final lap. - bichon frise dismissed. - we're the top two just us and that stupid freaking schnauzer. - come on wire fox terrier. come on baby. - shh shh shh shh. the judge has made his decision. - shut up! hold my hand captain. hold my hand. - and best in show goes to the wire fox terrier. [yelling and exclaiming] - i'm gonna live forever! - whoo! [tense music] - charles? it's been quiet for a while. everything okay? - i was gonna chop the heck out of this bastard but then he looked me in the eye - he scratched you up real bad didn't he? - yep he got me good. [all exclaiming] it's okay. once i started giving him gouda he showed me mercy. - so we're not eating the turkey then? - obviously not. - hello everyone. guess who just solved a 20-year-old unsolvable case?" %>%
cleanSourceText() %>%
ngrammifySourceText() %>%
getCorrelationIndices(., TARGETNGRAMSDF) %>%
as.matrix()[,-c(1,2)]
lalala  <- "it's turkey time. [toothbrush buzzing] [turkey squawks] - this is it the final lap. - bichon frise dismissed. - we're the top two just us and that stupid freaking schnauzer. - come on wire fox terrier. come on baby. - shh shh shh shh. the judge has made his decision. - shut up! hold my hand captain. hold my hand. - and best in show goes to the wire fox terrier. [yelling and exclaiming] - i'm gonna live forever! - whoo! [tense music] - charles? it's been quiet for a while. everything okay? - i was gonna chop the heck out of this bastard but then he looked me in the eye - he scratched you up real bad didn't he? - yep he got me good. [all exclaiming] it's okay. once i started giving him gouda he showed me mercy. - so we're not eating the turkey then? - obviously not. - hello everyone. guess who just solved a 20-year-old unsolvable case?" %>%
cleanSourceText() %>%
ngrammifySourceText() %>%
getCorrelationIndices(., TARGETNGRAMSDF)
View(lalala)
lalala %>% as.matrix()
lalala %>% as.matrix()[,-c(1,2)]
lalala %>% as.matrix() %>% .[,-c(1,2)]
lalala  <- "it's turkey time. [toothbrush buzzing] [turkey squawks] - this is it the final lap. - bichon frise dismissed. - we're the top two just us and that stupid freaking schnauzer. - come on wire fox terrier. come on baby. - shh shh shh shh. the judge has made his decision. - shut up! hold my hand captain. hold my hand. - and best in show goes to the wire fox terrier. [yelling and exclaiming] - i'm gonna live forever! - whoo! [tense music] - charles? it's been quiet for a while. everything okay? - i was gonna chop the heck out of this bastard but then he looked me in the eye - he scratched you up real bad didn't he? - yep he got me good. [all exclaiming] it's okay. once i started giving him gouda he showed me mercy. - so we're not eating the turkey then? - obviously not. - hello everyone. guess who just solved a 20-year-old unsolvable case?" %>%
cleanSourceText() %>%
ngrammifySourceText() %>%
getCorrelationIndices(., TARGETNGRAMSDF) %>%
as.matrix() %>%
.[,-c(1,2)] %>%
melt %>%
ggplot(aes(Var1, Var2, fill=value)) +
geom_raster() +
scale_fill_gradientn(colours = terrain.colors(10)) +
theme_minimal() +
theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank())
print(lalala)
lalala  <- "it's turkey time. [toothbrush buzzing] [turkey squawks] - this is it the final lap. - bichon frise dismissed. - we're the top two just us and that stupid freaking schnauzer. - come on wire fox terrier. come on baby. - shh shh shh shh. the judge has made his decision. - shut up! hold my hand captain. hold my hand. - and best in show goes to the wire fox terrier. [yelling and exclaiming] - i'm gonna live forever! - whoo! [tense music] - charles? it's been quiet for a while. everything okay? - i was gonna chop the heck out of this bastard but then he looked me in the eye - he scratched you up real bad didn't he? - yep he got me good. [all exclaiming] it's okay. once i started giving him gouda he showed me mercy. - so we're not eating the turkey then? - obviously not. - hello everyone. guess who just solved a 20-year-old unsolvable case?" %>%
cleanSourceText() %>%
ngrammifySourceText() %>%
getCorrelationIndices(., TARGETNGRAMSDF) %>%
as.matrix() %>%
.[,-c(1,2)] %>%
melt
View(lalala)
"it's turkey time. [toothbrush buzzing] [turkey squawks] - this is it the final lap. - bichon frise dismissed. - we're the top two just us and that stupid freaking schnauzer. - come on wire fox terrier. come on baby. - shh shh shh shh. the judge has made his decision. - shut up! hold my hand captain. hold my hand. - and best in show goes to the wire fox terrier. [yelling and exclaiming] - i'm gonna live forever! - whoo! [tense music] - charles? it's been quiet for a while. everything okay? - i was gonna chop the heck out of this bastard but then he looked me in the eye - he scratched you up real bad didn't he? - yep he got me good. [all exclaiming] it's okay. once i started giving him gouda he showed me mercy. - so we're not eating the turkey then? - obviously not. - hello everyone. guess who just solved a 20-year-old unsolvable case?" %>%
cleanSourceText() %>%
ngrammifySourceText() %>%
getCorrelationIndices(., TARGETNGRAMSDF) %>%
as.matrix() %>%
.[,-c(1,2)] %>%
melt %>%
ggplot(aes(Var1, factor(Var2), fill=value)) +
geom_raster() +
scale_fill_gradientn(colours = terrain.colors(10)) +
theme_minimal() +
theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank())
"it's turkey time. [toothbrush buzzing] [turkey squawks] - this is it the final lap. - bichon frise dismissed. - we're the top two just us and that stupid freaking schnauzer. - come on wire fox terrier. come on baby. - shh shh shh shh. the judge has made his decision. - shut up! hold my hand captain. hold my hand. - and best in show goes to the wire fox terrier. [yelling and exclaiming] - i'm gonna live forever! - whoo! [tense music] - charles? it's been quiet for a while. everything okay? - i was gonna chop the heck out of this bastard but then he looked me in the eye - he scratched you up real bad didn't he? - yep he got me good. [all exclaiming] it's okay. once i started giving him gouda he showed me mercy. - so we're not eating the turkey then? - obviously not. - hello everyone. guess who just solved a 20-year-old unsolvable case?" %>%
cleanSourceText() %>%
ngrammifySourceText() %>%
getCorrelationIndices(., TARGETNGRAMSDF) %>%
as.matrix() %>%
.[,-c(1,2)] %>%
melt %>%
ggplot(aes(Var1, factor(Var2), fill=as.numeric(value))) +
geom_raster() +
scale_fill_gradientn(colours = terrain.colors(10)) +
theme_minimal() +
theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank())
runApp('~/Documents/textlab')
runApp('~/Documents/textlab')
runApp('~/Documents/textlab')
runApp('~/Documents/textlab')
runApp('~/Documents/textlab')
runApp('~/Documents/textlab')
runApp('~/Documents/textlab')
runApp('~/Documents/textlab')
"it's turkey time. [toothbrush buzzing] [turkey squawks] - this is it the final lap. - bichon frise dismissed. - we're the top two just us and that stupid freaking schnauzer. - come on wire fox terrier. come on baby. - shh shh shh shh. the judge has made his decision. - shut up! hold my hand captain. hold my hand. - and best in show goes to the wire fox terrier. [yelling and exclaiming] - i'm gonna live forever! - whoo! [tense music] - charles? it's been quiet for a while. everything okay? - i was gonna chop the heck out of this bastard but then he looked me in the eye - he scratched you up real bad didn't he? - yep he got me good. [all exclaiming] it's okay. once i started giving him gouda he showed me mercy. - so we're not eating the turkey then? - obviously not. - hello everyone. guess who just solved a 20-year-old unsolvable case?"%>%
strsplit(.,' ') %>%
unlist %>%
.[1:10] %>%
paste(collapse = " ")
runApp('~/Documents/textlab')
runApp('~/Documents/textlab')
runApp('~/Documents/textlab')
runApp()
