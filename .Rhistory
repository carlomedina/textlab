library(magrittr)
library(tm)
library(quanteda)
library(tidytext)
text <- read.csv("./data/text_sim.csv", stringsAsFactors = F)
text$text <- gsub("\\[.*?\\]", "", text$text)
text$text <- gsub("[a-zA-Z0-9]*:", "", text$text, perl=T)
setwd("~/Documents/textlab")
text <- read.csv("./data/text_sim.csv", stringsAsFactors = F)
text$text <- gsub("\\[.*?\\]", "", text$text)
text$text <- gsub("[a-zA-Z0-9]*:", "", text$text, perl=T)
data <- Corpus(DataframeSource(text))
data <- tm_map(data, tolower)
data <- tm_map(data, removePunctuation)
data <- tm_map(data, removeNumbers)
df <- do.call("rbind", get("content", data)) %>% as.data.frame(stringsAsFactors = F)
?unnest_tokens
names(df) <- c("channel", "text")
ngrams <- df %>%
unnest_tokens(ngram, text, token="ngrams", n=6)
View(ngrams)
df <- do.call("rbind", get("content", data)) %>%
as.data.frame(stringsAsFactors = F) %>%
cbind(text$fname,., stringsAsFactors= F)
df <- do.call("rbind", get("content", data)) %>%
as.data.frame(stringsAsFactors = F) %>%
cbind(channel=text$fname,., stringsAsFactors= F)
?as.data.frame
df <- do.call("rbind", get("content", data)) %>%
as.data.frame(col.names = c("chan", "text"), stringsAsFactors = F) %>%
cbind(channel=text$fname,., stringsAsFactors= F)
df <- do.call("rbind", get("content", data)) %>%
as.data.frame(col.names = c("chan", "text"), stringsAsFactors = F)
df <- do.call("rbind", get("content", data)) %>%
as.data.frame(col.names = c("chan", "text"), stringsAsFactors = F) %>%
cbind(channel=text$fname,., stringsAsFactors= F)
names(df) <- c("channel", "chan", "text")
ngrams <- df %>%
unnest_tokens(ngram, text, token="ngrams", n=6)
matcher <- function(sourcengram, targetngram) {
lapply(sourcengram, FUN = function(ngram) {
which(ngram == targetngram)[1]
}) %>% unlist
}
match.df.6gram <- data.frame(source = ngrams$ngram[ngrams$id ==4],
stringsAsFactors = F)
runtime <- proc.time()
for (i in 1:50) {
index.match <- matcher(ngrams$ngram[ngrams$id ==4], ngrams$ngram[ngrams$id ==i])
temp <- lapply(index.match,
FUN = function (x) {
ngrams$ngram[ngrams$id == i][x]
}) %>% unlist
match.df.6gram <- cbind(match.df.6gram, temp, stringsAsFactors = F)
print(i)
}
warnings()
df <- do.call("rbind", get("content", data)) %>%
as.data.frame(col.names = c("chan", "text"), stringsAsFactors = F) %>%
cbind(channel=text$fname,id=1:199,., stringsAsFactors= F)
names(df) <- c("channel", "id", "chan", "text")
ngrams <- df %>%
unnest_tokens(ngram, text, token="ngrams", n=6)
match.df.6gram <- data.frame(source = ngrams$ngram[ngrams$id ==4],
stringsAsFactors = F)
runtime <- proc.time()
for (i in 1:50) {
index.match <- matcher(ngrams$ngram[ngrams$id ==4], ngrams$ngram[ngrams$id ==i])
temp <- lapply(index.match,
FUN = function (x) {
ngrams$ngram[ngrams$id == i][x]
}) %>% unlist
match.df.6gram <- cbind(match.df.6gram, temp, stringsAsFactors = F)
print(i)
}
View(ngrams)
source('~/Documents/textlab/01b-exploration-nocleaning.R', echo=TRUE)
matcher(ngrams$ngram[ngrams$id ==4], ngrams$ngram[ngrams$id ==i])
matcher(ngrams$ngram[ngrams$id ==4], ngrams$ngram[ngrams$id ==16])
index.match <- matcher(ngrams$ngram[ngrams$id ==4], ngrams$ngram[ngrams$id ==16])
index.match <- matcher(ngrams$ngram[ngrams$id ==4], ngrams$ngram[ngrams$id ==16])
temp <- lapply(index.match,
FUN = function (x) {
ngrams$ngram[ngrams$id == i][x]
}) %>% unlist
match.df.6gram.index <- data.frame(source = ngrams$ngram[ngrams$id ==1],
stringsAsFactors = F)
runtime <- proc.time()
for (i in 1:50) {
index.match <- matcher(ngrams$ngram[ngrams$id ==1], ngrams$ngram[ngrams$id ==i])
match.df.6gram.index <- cbind(match.df.6gram.index, index.match, stringsAsFactors = F)
print(i)
}
proc.time() - runtime
names(match.df.6gram.index) <- c("source", text$fname[1:50])
View(match.df.6gram.index)
for (j in 1:50) {
match.df.6gram.index <- data.frame(source = ngrams$ngram[ngrams$id ==j],
stringsAsFactors = F)
runtime <- proc.time()
for (i in 1:50) {
index.match <- matcher(ngrams$ngram[ngrams$id ==j], ngrams$ngram[ngrams$id ==i])
match.df.6gram.index <- cbind(match.df.6gram.index, index.match, stringsAsFactors = F)
print(i)
}
proc.time() - runtime
names(match.df.6gram.index) <- c("source", text$fname[1:50])
library(ggplot2)
library(reshape2)
library(magrittr)
# index plot
png(file=paste0("./figs/10-23-17", j, "to-1-50.png"))
p1 <- match.df.6gram.index[,-1] %>% as.matrix() %>%
melt %>%
ggplot(aes(Var1, Var2, fill=value)) +
geom_raster() +
scale_fill_gradientn(colours = terrain.colors(10)) +
theme_minimal() +
labs(title=paste(j, "to first 50 items")) +
theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank())
print(p1)
dev.off()
}
for (j in 1:50) {
match.df.6gram.index <- data.frame(source = ngrams$ngram[ngrams$id ==j],
stringsAsFactors = F)
runtime <- proc.time()
for (i in 1:50) {
index.match <- matcher(ngrams$ngram[ngrams$id ==j], ngrams$ngram[ngrams$id ==i])
match.df.6gram.index <- cbind(match.df.6gram.index, index.match, stringsAsFactors = F)
print(i)
}
proc.time() - runtime
names(match.df.6gram.index) <- c("source", text$fname[1:50])
library(ggplot2)
library(reshape2)
library(magrittr)
# index plot
png(file=paste0("./figs/10-23-2017/", j, "to-1-50.png"))
p1 <- match.df.6gram.index[,-1] %>% as.matrix() %>%
melt %>%
ggplot(aes(Var1, Var2, fill=value)) +
geom_raster() +
scale_fill_gradientn(colours = terrain.colors(10)) +
theme_minimal() +
labs(title=paste(j, "to first 50 items")) +
theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank())
print(p1)
dev.off()
}
